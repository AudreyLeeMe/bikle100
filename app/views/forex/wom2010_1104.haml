%a(href="/r10/site_map")Site Map
>
%a(href="/r10/forex")Forex
> 
%a(href="/forex/fx_cct")Current Correlation Trends
>  wom2010_1104
%h5 Week Of Month (wom2010_1104)

I found no evidence of strong correlation trends for Week Of Month (WOM).

The software I used to go on this quest can be found here:

%br/
%br/
%a(href="https://github.com/bikle/rluck/tree/master/sbw_wom_fed" target="t")
  https://github.com/bikle/rluck/tree/master/sbw_wom_fed
%br/
%br/

Week-of-Month queries can be useful if I have a strong opinion about
the direction of either a particular currency or a particular
currencly pair.

For example, on 2010-11-03, the Fed publicized a policy which some call "Quantitative Easing":
%br/
%br/

%a(href="https://encrypted.google.com/search?q=Quantitative+Easing" target="g")
  https://encrypted.google.com/search?q=Quantitative+Easing

%br/
%br/

An anecdotal scan of the media suggests that this policy should force
consumers, banks, and businesses to have a bearish opinion about USD.

This is actually a big topic but I suspect that bearish sentiment towards USD is rising.

If you are a USD bear, the query listed below may be of interest to you.

It shows, for 2009 and 2010, the average hourly rate of return for various currency pairs.

I sorted the list by absolute value of the return:

%pre
  :preserve
    SQL*Plus: Release 11.2.0.1.0 Production on Wed Nov 10 20:14:43 2010
    
    Copyright (c) 1982, 2009, Oracle.  All rights reserved.
    
    
    Connected to:
    Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
    With the Partitioning, OLAP, Data Mining and Real Application Testing options
    
    20:14:44 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';
    
    Session altered.
    
    Elapsed: 00:00:00.00
    20:14:44 SQL> 20:14:44 SQL> --
    20:14:44 SQL> -- sbw_wom.sql
    20:14:44 SQL> --
    20:14:44 SQL> 
    20:14:44 SQL> SET LINES 66
    20:14:44 SQL> DESC hourly
     Name                             Null?    Type
     -------------------------------- -------- -----------------------
     PAIR                                      VARCHAR2(15)
     YDATE                                     DATE
     VOL                                       NUMBER
     OPN                                       NUMBER
     CLSE                                      NUMBER
     MN                                        NUMBER
     MX                                        NUMBER
    
    20:14:44 SQL> SET LINES 166
    20:14:44 SQL> 
    20:14:44 SQL> -- For each pair, look at wom WHERE ydate > '2009-01-01'
    20:14:44 SQL> SELECT pair,week_of_month,AVG(nhgain),SUM(nhgain),COUNT(nhgain)
    20:14:44   2  FROM
    20:14:44   3  (
    20:14:44   4    SELECT
    20:14:44   5    pair
    20:14:44   6    ,ydate
    20:14:44   7    ,opn
    20:14:44   8    ,clse
    20:14:44   9    -- Hourly gain:
    20:14:44  10    ,(clse-opn)      hgain
    20:14:44  11    -- Normalized hourly gain:
    20:14:44  12    ,(clse-opn)/opn nhgain
    20:14:44  13    ,0+TO_CHAR(ydate,'W')week_of_month
    20:14:44  14    FROM hourly WHERE opn>0
    20:14:44  15  )
    20:14:44  16  WHERE ydate > '2009-01-01'
    20:14:44  17  GROUP BY pair,week_of_month
    20:14:44  18  ORDER BY ABS(AVG(nhgain))DESC
    20:14:44  19  /
    
    PAIR            WEEK_OF_MONTH AVG(NHGAIN) SUM(NHGAIN) COUNT(NHGAIN)
    --------------- ------------- ----------- ----------- -------------
    gbp_usd                     5  .000095108  .085216558           896
    usd_chf                     5  -.00007708  -.06906327           896
    aud_usd                     1   .00006102  .169574576          2779
    usd_jpy                     2  -.00005833   -.1577175          2704
    usd_cad                     2  -.00005683  -.15365759          2704
    usd_cad                     1  -.00005431  -.15091846          2779
    aud_usd                     2  .000049227  .133110114          2704
    usd_chf                     2  -.00004043  -.10932496          2704
    usd_jpy                     1  .000036974  .102751974          2779
    aud_usd                     3   -.0000358  -.09512569          2657
    eur_usd                     2   .00003358  .090800063          2704
    aud_usd                     5  .000026627  .023857728           896
    usd_cad                     3   .00002229  .059224864          2657
    eur_usd                     5  .000022025  .019734154           896
    usd_jpy                     3   -.0000196  -.05208242          2657
    gbp_usd                     3  -.00001874  -.04969654          2652
    gbp_usd                     2   .00001714  .046346731          2704
    usd_chf                     1  .000014172  .039384148          2779
    eur_usd                     3  .000014025  .037265422          2657
    eur_usd                     1  -.00001214  -.03374724          2779
    gbp_usd                     1  .000010381  .028848434          2779
    eur_usd                     4  7.0153E-06  .018555414          2645
    aud_usd                     4  6.3436E-06  .016778794          2645
    usd_chf                     3  -6.235E-06  -.01656746          2657
    gbp_usd                     4  -4.915E-06  -.01296691          2638
    usd_jpy                     5  3.6263E-06  .003249155           896
    usd_cad                     5  3.4071E-06  .003052725           896
    usd_chf                     4  1.5534E-06  .004108684          2645
    usd_cad                     4  -5.664E-07  -.00149807          2645
    usd_jpy                     4  5.1457E-07  .001361027          2645
    
    30 rows selected.
    
    Elapsed: 00:00:00.19
    20:14:44 SQL> 
    20:14:44 SQL> exit
    Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
    With the Partitioning, OLAP, Data Mining and Real Application Testing options


A copy of the above report and the SQL which created it is at this URL:
%br/
%a(href="https://github.com/bikle/rluck/tree/master/wom2010_1104/" target="t")
  https://github.com/bikle/rluck/tree/master/wom2010_1104/
%br/
%br/

Notice that the first row in the report is for the gbp_usd pair.  If you trade this pair, you will use USD to buy GBP.
If USD is falling, it makes sense that the gain for this pair would be positive.

The second row in the report is for the usd_chf pair.  In this trade you would use CHF to buy USD.

A USD bear however, would instead use CHF to short, not buy, USD.

Since USD has been falling in value it makes sense that the gain for the usd_chf pair would be negative.
%br/
%br/

So why is the above report useful to a USD bear?

It is useful because it shows (in sorted order) the most lucrative Week of Month trades.

The first row in the report shows that on the 5th week of the month in 2009 and 2010 the gbp_usd pair had an approximate gain of 0.95108 pips / hour.  

The Forex Market trades 24 x 5 hours / week. 
 
So this is a rate of return of (0.95108 pips / hour) x (24 x 5 hours / week) which is 114 pips / week.

Most Forex traders use 250 pips of collateral to trade $1.

So 114 pips / week in percentage terms is (114 / 250)x100% which is a 46% return in 1 week.

My attitude is this:

Markets are fickle; it seems plausible that 2011, 2012, 2013 will yield very different result than 2009 and 2010.

But, it also it seems possible that the USD will fall for a long time for several reasons:

%ul
  %li The stated policy of the Fed is stimulate the US economy with easy money
  %li Export based economies which sell many goods or resources tend to build a strong currency
  %li Australia, Canada, and Japan have export based economies
  %li USA has an import based economy

%br/
One problem with the above report is that the USD-bullish trades are mixed with the USD-bearish trades.
%br/
%br/
I wrote a second script which separates them:

%pre
  :preserve
    SQL*Plus: Release 11.2.0.1.0 Production on Tue Nov 9 18:37:59 2010
    
    Copyright (c) 1982, 2009, Oracle.  All rights reserved.
    
    
    Connected to:
    Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
    With the Partitioning, OLAP, Data Mining and Real Application Testing options
    
    18:37:59 SQL> ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD hh24:mi:ss';
    
    Session altered.
    
    Elapsed: 00:00:00.00
    18:37:59 SQL> 18:37:59 SQL> --
    18:37:59 SQL> -- bb_wom.sql
    18:37:59 SQL> --
    18:37:59 SQL> 
    18:37:59 SQL> SET LINES 66
    18:37:59 SQL> DESC hourly
     Name                             Null?    Type
     -------------------------------- -------- -----------------------
     PAIR                                      VARCHAR2(15)
     YDATE                                     DATE
     VOL                                       NUMBER
     OPN                                       NUMBER
     CLSE                                      NUMBER
     MN                                        NUMBER
     MX                                        NUMBER
    
    18:37:59 SQL> SET LINES 166
    18:37:59 SQL> 
    18:37:59 SQL> -- For each pair, look at wom WHERE ydate > '2009-01-01'
    18:37:59 SQL> -- Filter out anything with abs(nhgain) < 0.0001 / 4
    18:37:59 SQL> CREATE OR REPLACE VIEW bb_wom AS
    18:37:59   2  SELECT
    18:37:59   3  pair,week_of_month
    18:37:59   4  ,ROUND(avg_nhgain,6)avg_nhgain
    18:37:59   5  ,ROUND(sum_nhgain,4)sum_nhgain
    18:37:59   6  ,count_nhgain
    18:37:59   7  FROM
    18:37:59   8  (
    18:37:59   9    SELECT
    18:37:59  10    pair,week_of_month
    18:37:59  11    ,AVG(nhgain)  avg_nhgain
    18:37:59  12    ,SUM(nhgain)  sum_nhgain
    18:37:59  13    ,COUNT(nhgain)count_nhgain
    18:37:59  14    FROM
    18:37:59  15    (
    18:37:59  16      SELECT
    18:37:59  17      pair
    18:37:59  18      ,ydate
    18:37:59  19      ,opn
    18:37:59  20      ,clse
    18:37:59  21      -- Hourly gain:
    18:37:59  22      ,(clse-opn)     hgain
    18:37:59  23      -- Normalized hourly gain:
    18:37:59  24      ,(clse-opn)/opn nhgain
    18:37:59  25      ,0+TO_CHAR(ydate,'W')week_of_month
    18:37:59  26      FROM hourly WHERE opn>0
    18:37:59  27    )
    18:37:59  28    WHERE ydate > '2009-01-01'
    18:37:59  29    GROUP BY pair,week_of_month
    18:37:59  30  )
    18:37:59  31  -- I only want to see trades which give more that 1/4 pip per hour:
    18:37:59  32  WHERE ABS(avg_nhgain) > (0.0001 / 4)
    18:37:59  33  /
    
    View created.
    
    Elapsed: 00:00:00.09
    18:37:59 SQL> 
    18:37:59 SQL> -- I want to see USD bearish positions first.
    18:37:59 SQL> SELECT * FROM bb_wom
    18:37:59   2  WHERE
    18:37:59   3  (
    18:37:59   4    (pair LIKE'%_usd'AND avg_nhgain>0)
    18:37:59   5    OR
    18:37:59   6    (pair LIKE'usd_%'AND avg_nhgain<0)
    18:37:59   7  )
    18:37:59   8  -- Sort better trades to the top:
    18:37:59   9  ORDER BY ABS(avg_nhgain) DESC
    18:37:59  10  /
    
    PAIR            WEEK_OF_MONTH AVG_NHGAIN SUM_NHGAIN COUNT_NHGAIN
    --------------- ------------- ---------- ---------- ------------
    gbp_usd                     5    .000095      .0852          896
    usd_chf                     5   -.000077     -.0691          896
    aud_usd                     1    .000061      .1696         2779
    usd_jpy                     2   -.000061     -.1639         2678
    usd_cad                     2   -.000059     -.1574         2678
    usd_cad                     1   -.000054     -.1509         2779
    aud_usd                     2    .000053      .1415         2678
    usd_chf                     2   -.000042     -.1119         2678
    eur_usd                     2    .000038       .101         2678
    aud_usd                     5    .000027      .0239          896
    
    10 rows selected.
    
    Elapsed: 00:00:00.17
    18:38:00 SQL> 
    18:38:00 SQL> 
    18:38:00 SQL> -- Now show USD bullish positions:
    18:38:00 SQL> SELECT * FROM bb_wom
    18:38:00   2  WHERE
    18:38:00   3  (
    18:38:00   4    (pair LIKE'%_usd'AND avg_nhgain<0)
    18:38:00   5    OR
    18:38:00   6    (pair LIKE'usd_%'AND avg_nhgain>0)
    18:38:00   7  )
    18:38:00   8  -- Sort better trades to the top:
    18:38:00   9  ORDER BY ABS(avg_nhgain) DESC
    18:38:00  10  /
    
    PAIR            WEEK_OF_MONTH AVG_NHGAIN SUM_NHGAIN COUNT_NHGAIN
    --------------- ------------- ---------- ---------- ------------
    usd_jpy                     1    .000037      .1028         2779
    aud_usd                     3   -.000036     -.0951         2657
    
    Elapsed: 00:00:00.16
    18:38:00 SQL> 
    18:38:00 SQL> exit
    Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
    With the Partitioning, OLAP, Data Mining and Real Application Testing options



The first obvious piece of information I see in the above report is that only two lucrative trades are USD bullish.
The others are USD bearish.

%br/
%br/
The second interesting information is a bit more subtle but it is there.
It appears that the value leaving USD is mostly happening during the first 2 weeks of every month.
The small trickle which comes back returns from traders selling AUD to buy USD in the 3rd week of every month.
%br/
%br/
An obvious trading strategy I see in this report is that I should sell
USD during the first 2 weeks of every month to buy AUD, CAD, JPY, and CHF.
%br/
%br/
Also if I am in a month which has a 5th week, I would sell USD to buy GBP.
I would be timid about that though.  
My sentiment towards GBP is neutral compared to other currencies.

%br/
%br/
A copy of the above report and the SQL which created it is at this URL:
%br/
%a(href="https://github.com/bikle/rluck/tree/master/wom2010_1104/" target="t")
  https://github.com/bikle/rluck/tree/master/wom2010_1104/
%br/
%br/

